package main

import (
	"fmt"
	"path"
	"strings"
)

type DBGenerator interface {
	GetFileName(a *App) (fileName string)
	CreateDB(a *App) (sql string)
	CreateTable(m *Model) (sql string)
	CreateColumn(f *Field) (sql string)
}

type MySQLDBGenerator struct {
	Name string
}

var (
	mySQLDBGenerator *MySQLDBGenerator = &MySQLDBGenerator{
		Name: "mysql",
	}
)

func GenerateDBSQL(generator DBGenerator, a *App) (ok bool) {
	fileName := generator.GetFileName(a)
	SQL := generator.CreateDB(a)
	for _, mod := range a.Models {
		SQL += fmt.Sprintln() + generator.CreateTable(mod)
	}
	CreateFile(fileName, SQL)
	return true
}

func (g *MySQLDBGenerator) GetFileName(a *App) (fileName string) {
	t := a.GetServerSettings()
	fileName = fmt.Sprintf("%s.%s.sql", path.Join(t.directories["db"], a.Name), strings.ToLower(g.Name))
	return
}

func (g *MySQLDBGenerator) CreateDB(a *App) (sql string) {
	t := a.GetServerSettings()
	sql = fmt.Sprintf(
		`DROP DATABASE IF EXISTS %s;
		CREATE DATABASE IF NOT EXISTS %s;
		GRANT ALL ON %s.* TO '%s'@'localhost' IDENTIFIED BY '%s';
		USE %s;`,
		t.dbName, t.dbName, t.dbName, t.dbUser, t.dbUserPassword, t.dbName)
	return
}

func (g *MySQLDBGenerator) CreateTable(m *Model) (sql string) {
	colSql := ""
	for index, fld := range m.Fields {
		colSql += g.CreateColumn(fld)
		if index < len(m.Fields)-1 {
			colSql += "," + fmt.Sprintln()
		}
	}
	sql = fmt.Sprintf(
		`DROP TABLE IF EXISTS %s;
		CREATE TABLE IF NOT EXISTS %s (
			%s
		) ENGINE=MyISAM;`,
		m.Name, m.Name, colSql)
	return
}

func (g *MySQLDBGenerator) CreateColumn(f *Field) (sql string) {
	var colType, defType, identity, comment, primaryKey string
	switch f.Type {
	case Boolean:
		colType = "bit(1)"
	case Date:
		colType = "datetime"
	case Float:
		colType = "float"
	case Integer:
		if f.Identity && f.AutoGenerated {
			colType = "Bigint UNSIGNED"
		} else {
			colType = "int"
		}
	case String:
		if f.Validator != nil && f.Validator.MaxLen > 0 {
			colType = fmt.Sprintf("varchar(%d)", f.Validator.MaxLen)
		} else {
			colType = "varchar(500)"
		}
	}
	if f.Validator != nil && f.Validator.Required {
		defType = `NOT NULL`
	} else {
		defType = `DEFAULT NULL`
	}
	if f.Identity {
		identity = `AUTO_INCREMENT`
	}
	comment = fmt.Sprintf(`COMMENT '%s'`, f.DisplayName)

	if f.PrimaryKey {
		primaryKey = fmt.Sprintf(`, PRIMARY KEY (%s)`, f.Name)
	}

	sql = fmt.Sprintf("%s %s %s %s %s %s", f.Name, colType, defType, identity, comment, primaryKey)
	return
}
